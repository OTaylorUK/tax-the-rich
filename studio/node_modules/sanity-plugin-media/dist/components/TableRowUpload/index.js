"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("@sanity/color");
var icons_1 = require("@sanity/icons");
var ui_1 = require("@sanity/ui");
var filesize_1 = __importDefault(require("filesize"));
var react_1 = __importDefault(require("react"));
var react_redux_1 = require("react-redux");
var constants_1 = require("../../constants");
var useTypedSelector_1 = __importDefault(require("../../hooks/useTypedSelector"));
var uploads_1 = require("../../modules/uploads");
var FileIcon_1 = __importDefault(require("../FileIcon"));
var Image_1 = __importDefault(require("../Image"));
var TableRowUpload = function (props) {
    var id = props.id;
    // Redux
    var dispatch = (0, react_redux_1.useDispatch)();
    var item = (0, useTypedSelector_1.default)(function (state) { return (0, uploads_1.selectUploadById)(state, id); });
    var mediaIndex = (0, ui_1.useMediaIndex)();
    if (!item) {
        return null;
    }
    var fileSize = (0, filesize_1.default)(item.size, { base: 10, round: 0 });
    var percentLoaded = Math.round(item.percent || 0); // (0 - 100)
    var isComplete = item.status === 'complete';
    var isUploading = item.status === 'uploading';
    var isQueued = item.status === 'queued';
    var status;
    if (isComplete) {
        status = 'Verifying';
    }
    if (isUploading) {
        status = "".concat(percentLoaded, "%");
    }
    if (isQueued) {
        status = 'Queued';
    }
    // Callbacks
    var handleCancelUpload = function () {
        dispatch(uploads_1.uploadsActions.uploadCancel({ hash: item.hash }));
    };
    return (react_1.default.createElement(ui_1.Grid, { style: {
            alignItems: 'center',
            background: color_1.hues.gray[950].hex,
            gridColumnGap: mediaIndex < 3 ? 0 : '16px',
            gridRowGap: 0,
            gridTemplateColumns: mediaIndex < 3 ? constants_1.GRID_TEMPLATE_COLUMNS.SMALL : constants_1.GRID_TEMPLATE_COLUMNS.LARGE,
            gridTemplateRows: mediaIndex < 3 ? 'auto' : '1fr',
            height: '100%',
            position: 'relative'
        } },
        react_1.default.createElement("div", { style: {
                background: color_1.hues.gray[600].hex,
                bottom: 0,
                height: '1px',
                left: 0,
                position: 'absolute',
                width: '100%',
                transform: "scaleX(".concat(percentLoaded * 0.01, ")"),
                transformOrigin: 'bottom left',
                transition: 'all 1000ms ease-out'
            } }),
        react_1.default.createElement(ui_1.Box, { style: {
                gridColumn: 2,
                gridRowStart: mediaIndex < 3 ? 1 : 'auto',
                gridRowEnd: mediaIndex < 3 ? 'span 4' : 'auto',
                height: '90px',
                width: '100px'
            } },
            react_1.default.createElement(ui_1.Box, { style: { height: '100%', position: 'relative' } },
                item.assetType === 'image' && (item === null || item === void 0 ? void 0 : item.objectUrl) && (react_1.default.createElement(Image_1.default, { draggable: false, src: item.objectUrl, style: { opacity: 0.25 } })),
                item.assetType === 'file' && (react_1.default.createElement("div", { style: { height: '100%', opacity: 0.1 } },
                    react_1.default.createElement(FileIcon_1.default, { width: "40px" }))),
                !isComplete && percentLoaded !== 100 && (react_1.default.createElement(ui_1.Flex, { align: "center", justify: "center", style: {
                        position: 'absolute',
                        height: '100%',
                        left: 0,
                        top: 0,
                        width: '100%'
                    } },
                    react_1.default.createElement(ui_1.Tooltip, { content: react_1.default.createElement(ui_1.Box, { padding: 2 },
                            react_1.default.createElement(ui_1.Text, { muted: true, size: 1 }, "Cancel")), disabled: 'ontouchstart' in window, placement: "top" },
                        react_1.default.createElement(ui_1.Button, { fontSize: 3, icon: icons_1.CloseIcon, mode: "bleed", onClick: handleCancelUpload, padding: 2, style: { background: 'none', boxShadow: 'none' }, tone: "critical" })))))),
        react_1.default.createElement(ui_1.Box, { style: {
                gridColumn: mediaIndex < 3 ? 3 : '3/8',
                gridRow: mediaIndex < 3 ? '2/4' : 'auto',
                marginLeft: mediaIndex < 3 ? 3 : 0
            } },
            react_1.default.createElement(ui_1.Stack, { space: 3 },
                react_1.default.createElement(ui_1.Text, { muted: true, size: 1, textOverflow: "ellipsis" },
                    item.name,
                    " (",
                    fileSize,
                    ")"),
                react_1.default.createElement(ui_1.Text, { size: 1, textOverflow: "ellipsis", weight: "semibold" }, status)))));
};
exports.default = TableRowUpload;
//# sourceMappingURL=index.js.map