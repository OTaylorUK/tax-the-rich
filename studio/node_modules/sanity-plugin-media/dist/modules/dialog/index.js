"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dialogActions = exports.dialogTagDeleteEpic = exports.dialogTagCreateEpic = exports.dialogClearOnAssetUpdateEpic = void 0;
var toolkit_1 = require("@reduxjs/toolkit");
var pluralize_1 = __importDefault(require("pluralize"));
var redux_observable_1 = require("redux-observable");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var assets_1 = require("../assets");
var tags_1 = require("../tags");
var initialState = {
    items: []
};
var dialogSlice = (0, toolkit_1.createSlice)({
    name: 'dialog',
    initialState: initialState,
    reducers: {
        // Clear all dialogs
        clear: function (state) {
            state.items = [];
        },
        // Add newly created inline tag to assetEdit dialog
        inlineTagCreate: function (state, action) {
            var _a = action.payload, assetId = _a.assetId, tag = _a.tag;
            state.items.forEach(function (item) {
                if (item.type === 'assetEdit' && item.assetId === assetId) {
                    item.lastCreatedTag = {
                        label: tag.name.current,
                        value: tag._id
                    };
                }
            });
        },
        // Remove inline tags from assetEdit dialog
        inlineTagRemove: function (state, action) {
            var tagIds = action.payload.tagIds;
            state.items.forEach(function (item) {
                if (item.type === 'assetEdit') {
                    item.lastRemovedTagIds = tagIds;
                }
            });
        },
        // Remove dialog by id
        remove: function (state, action) {
            var _a;
            var id = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.id;
            state.items = state.items.filter(function (item) { return item.id !== id; });
        },
        showConfirmAssetsTagAdd: function (state, action) {
            var _a = action.payload, assetsPicked = _a.assetsPicked, closeDialogId = _a.closeDialogId, tag = _a.tag;
            var suffix = "".concat(assetsPicked.length, " ").concat((0, pluralize_1.default)('asset', assetsPicked.length));
            state.items.push({
                closeDialogId: closeDialogId,
                confirmCallbackAction: assets_1.assetsActions.tagsAddRequest({
                    assets: assetsPicked,
                    tag: tag
                }),
                confirmText: "Yes, add tag to ".concat(suffix),
                title: "Add tag ".concat(tag.name.current, " to ").concat(suffix, "?"),
                id: 'confirm',
                headerTitle: 'Confirm tag addition',
                tone: 'primary',
                type: 'confirm'
            });
        },
        showConfirmAssetsTagRemove: function (state, action) {
            var _a = action.payload, assetsPicked = _a.assetsPicked, closeDialogId = _a.closeDialogId, tag = _a.tag;
            var suffix = "".concat(assetsPicked.length, " ").concat((0, pluralize_1.default)('asset', assetsPicked.length));
            state.items.push({
                closeDialogId: closeDialogId,
                confirmCallbackAction: assets_1.assetsActions.tagsRemoveRequest({ assets: assetsPicked, tag: tag }),
                confirmText: "Yes, remove tag from ".concat(suffix),
                headerTitle: 'Confirm tag removal',
                id: 'confirm',
                title: "Remove tag ".concat(tag.name.current, " from ").concat(suffix, "?"),
                tone: 'critical',
                type: 'confirm'
            });
        },
        showConfirmDeleteAssets: function (state, action) {
            var _a = action.payload, assets = _a.assets, closeDialogId = _a.closeDialogId;
            var suffix = "".concat(assets.length, " ").concat((0, pluralize_1.default)('asset', assets.length));
            state.items.push({
                closeDialogId: closeDialogId,
                confirmCallbackAction: assets_1.assetsActions.deleteRequest({
                    assets: assets.map(function (assetItem) { return assetItem.asset; })
                }),
                confirmText: "Yes, delete ".concat(suffix),
                description: 'This operation cannot be reversed. Are you sure you want to continue?',
                title: "Permanently delete ".concat(suffix, "?"),
                id: 'confirm',
                headerTitle: 'Confirm deletion',
                tone: 'critical',
                type: 'confirm'
            });
        },
        showConfirmDeleteTag: function (state, action) {
            var _a = action.payload, closeDialogId = _a.closeDialogId, tag = _a.tag;
            var suffix = 'tag';
            state.items.push({
                closeDialogId: closeDialogId,
                confirmCallbackAction: tags_1.tagsActions.deleteRequest({ tag: tag }),
                confirmText: "Yes, delete ".concat(suffix),
                description: 'This operation cannot be reversed. Are you sure you want to continue?',
                title: "Permanently delete ".concat(suffix, "?"),
                id: 'confirm',
                headerTitle: 'Confirm deletion',
                tone: 'critical',
                type: 'confirm'
            });
        },
        showAssetEdit: function (state, action) {
            var assetId = action.payload.assetId;
            state.items.push({
                assetId: assetId,
                id: assetId,
                type: 'assetEdit'
            });
        },
        showSearchFacets: function (state) {
            state.items.push({
                id: 'searchFacets',
                type: 'searchFacets'
            });
        },
        showTagCreate: function (state) {
            state.items.push({
                id: 'tagCreate',
                type: 'tagCreate'
            });
        },
        showTagEdit: function (state, action) {
            var tagId = action.payload.tagId;
            state.items.push({
                id: tagId,
                tagId: tagId,
                type: 'tagEdit'
            });
        },
        showTags: function (state) {
            state.items.push({
                id: 'tags',
                type: 'tags'
            });
        }
    }
});
var dialogClearOnAssetUpdateEpic = function (action$) {
    return action$.pipe((0, redux_observable_1.ofType)(assets_1.assetsActions.deleteComplete.type, assets_1.assetsActions.updateComplete.type, tags_1.tagsActions.deleteComplete.type, tags_1.tagsActions.updateComplete.type), (0, operators_1.filter)(function (action) { var _a; return !!((_a = action === null || action === void 0 ? void 0 : action.payload) === null || _a === void 0 ? void 0 : _a.closeDialogId); }), (0, operators_1.mergeMap)(function (action) {
        var _a;
        var dialogId = (_a = action === null || action === void 0 ? void 0 : action.payload) === null || _a === void 0 ? void 0 : _a.closeDialogId;
        if (dialogId) {
            return (0, rxjs_1.of)(dialogSlice.actions.remove({ id: dialogId }));
        }
        return (0, rxjs_1.empty)();
    }));
};
exports.dialogClearOnAssetUpdateEpic = dialogClearOnAssetUpdateEpic;
var dialogTagCreateEpic = function (action$) {
    return action$.pipe((0, operators_1.filter)(tags_1.tagsActions.createComplete.match), (0, operators_1.mergeMap)(function (action) {
        var _a = action === null || action === void 0 ? void 0 : action.payload, assetId = _a.assetId, tag = _a.tag;
        if (assetId) {
            return (0, rxjs_1.of)(dialogSlice.actions.inlineTagCreate({ tag: tag, assetId: assetId }));
        }
        if (tag._id) {
            return (0, rxjs_1.of)(dialogSlice.actions.remove({ id: 'tagCreate' }));
        }
        return (0, rxjs_1.empty)();
    }));
};
exports.dialogTagCreateEpic = dialogTagCreateEpic;
var dialogTagDeleteEpic = function (action$) {
    return action$.pipe((0, operators_1.filter)(tags_1.tagsActions.listenerDeleteQueueComplete.match), (0, operators_1.mergeMap)(function (action) {
        var tagIds = (action === null || action === void 0 ? void 0 : action.payload).tagIds;
        return (0, rxjs_1.of)(dialogSlice.actions.inlineTagRemove({ tagIds: tagIds }));
    }));
};
exports.dialogTagDeleteEpic = dialogTagDeleteEpic;
exports.dialogActions = dialogSlice.actions;
exports.default = dialogSlice.reducer;
//# sourceMappingURL=index.js.map