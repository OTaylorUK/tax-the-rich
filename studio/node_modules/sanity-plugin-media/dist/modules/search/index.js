"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchActions = exports.selectIsSearchFacetTag = exports.searchFacetTagUpdateEpic = void 0;
var toolkit_1 = require("@reduxjs/toolkit");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var uuid_1 = require("@sanity/uuid");
var tags_1 = require("../tags");
var initialState = {
    facets: [],
    query: ''
};
var searchSlice = (0, toolkit_1.createSlice)({
    name: 'search',
    initialState: initialState,
    reducers: {
        // Add search facet
        facetsAdd: function (state, action) {
            state.facets.push(__assign(__assign({}, action.payload.facet), { id: (0, uuid_1.uuid)() }));
        },
        // Clear all search facets
        facetsClear: function (state) {
            state.facets = [];
        },
        // Remove search facet by name
        facetsRemoveByName: function (state, action) {
            state.facets = state.facets.filter(function (facet) { return facet.name !== action.payload.facetName; });
        },
        // Remove search facet by name
        facetsRemoveByTag: function (state, action) {
            state.facets = state.facets.filter(function (facet) {
                var _a;
                return !(facet.name === 'tag'
                    && facet.type === 'searchable'
                    && (facet.operatorType === 'references' || facet.operatorType === 'doesNotReference')
                    && ((_a = facet.value) === null || _a === void 0 ? void 0 : _a.value) === action.payload.tagId);
            });
        },
        // Remove search facet by name
        facetsRemoveById: function (state, action) {
            state.facets = state.facets.filter(function (facet) { return facet.id !== action.payload.facetId; });
        },
        // Update an existing search facet
        facetsUpdate: function (state, action) {
            var _a = action.payload, modifier = _a.modifier, name = _a.name, operatorType = _a.operatorType, value = _a.value;
            var facet = state.facets.find(function (f) { return f.name === name; });
            if (!facet) {
                return;
            }
            if (facet.type === 'number' && modifier) {
                facet.modifier = modifier;
            }
            if (operatorType) {
                facet.operatorType = operatorType;
            }
            if (typeof value !== 'undefined') {
                facet.value = value;
            }
            state.facets = state.facets.filter(function (f) { return f.name !== facet.name || f.id === facet.id; });
        },
        // Update an existing search facet
        facetsUpdateById: function (state, action) {
            var _a = action.payload, modifier = _a.modifier, id = _a.id, operatorType = _a.operatorType, value = _a.value;
            state.facets.forEach(function (facet, index) {
                if (facet.id === id) {
                    if (facet.type === 'number' && modifier) {
                        facet.modifier = modifier;
                    }
                    if (operatorType) {
                        facet.operatorType = operatorType;
                    }
                    if (typeof value !== 'undefined') {
                        state.facets[index].value = value;
                    }
                }
            });
        },
        // Update existing search query
        querySet: function (state, action) {
            var _a;
            state.query = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.searchQuery;
        }
    }
});
// On tag update success -> update existing tag search facet (if present)
var searchFacetTagUpdateEpic = function (action$, state$) {
    return action$.pipe((0, operators_1.filter)(tags_1.tagsActions.updateComplete.match), (0, operators_1.withLatestFrom)(state$), (0, operators_1.mergeMap)(function (_a) {
        var _b, _c, _d, _e, _f;
        var _g = __read(_a, 2), action = _g[0], state = _g[1];
        var tag = action.payload.tag;
        var currentSearchFacetTag = (_b = state.search.facets) === null || _b === void 0 ? void 0 : _b.find(function (facet) { return facet.name === 'tag'; });
        var tagItem = state.tags.byIds[tag._id];
        if ((currentSearchFacetTag === null || currentSearchFacetTag === void 0 ? void 0 : currentSearchFacetTag.type) === 'searchable') {
            if (((_c = currentSearchFacetTag.value) === null || _c === void 0 ? void 0 : _c.value) === tag._id) {
                return (0, rxjs_1.of)(searchSlice.actions.facetsUpdate({
                    name: 'tag',
                    value: {
                        label: (_e = (_d = tagItem === null || tagItem === void 0 ? void 0 : tagItem.tag) === null || _d === void 0 ? void 0 : _d.name) === null || _e === void 0 ? void 0 : _e.current,
                        value: (_f = tagItem === null || tagItem === void 0 ? void 0 : tagItem.tag) === null || _f === void 0 ? void 0 : _f._id
                    }
                }));
            }
        }
        return (0, rxjs_1.empty)();
    }));
};
exports.searchFacetTagUpdateEpic = searchFacetTagUpdateEpic;
// Selectors
exports.selectIsSearchFacetTag = (0, toolkit_1.createSelector)([
    function (state) { return state.search.facets; },
    function (_state, tagId) { return tagId; }
], function (searchFacets, tagId) {
    return searchFacets.some(function (facet) {
        var _a;
        return facet.name === 'tag'
            && facet.type === 'searchable'
            && (facet.operatorType === 'references' || facet.operatorType === 'doesNotReference')
            && ((_a = facet.value) === null || _a === void 0 ? void 0 : _a.value) === tagId;
    });
});
exports.searchActions = searchSlice.actions;
exports.default = searchSlice.reducer;
//# sourceMappingURL=index.js.map